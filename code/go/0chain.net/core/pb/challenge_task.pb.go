// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: code/go/0chain.net/core/pb/challenge_task.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeID        string                  `protobuf:"bytes,1,opt,name=ChallengeID,proto3" json:"ChallengeID,omitempty"`
	RootHash           string                  `protobuf:"bytes,2,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Storages           []*ChallengeStorage     `protobuf:"bytes,3,rep,name=Storages,proto3" json:"Storages,omitempty"`
	WriteMarkers       []*ChallengeWriteMarker `protobuf:"bytes,4,rep,name=WriteMarkers,proto3" json:"WriteMarkers,omitempty"`
	SelectedFile       *ChallengeStorage       `protobuf:"bytes,5,opt,name=SelectedFile,proto3" json:"SelectedFile,omitempty"`
	SelectedBlockIndex int64                   `protobuf:"varint,6,opt,name=SelectedBlockIndex,proto3" json:"SelectedBlockIndex,omitempty"`
	SelectedBlockBytes []byte                  `protobuf:"bytes,7,opt,name=SelectedBlockBytes,proto3" json:"SelectedBlockBytes,omitempty"`
	SelectedMerklePath *MerklePath             `protobuf:"bytes,8,opt,name=SelectedMerklePath,proto3" json:"SelectedMerklePath,omitempty"`
}

func (x *ChallengeTask) Reset() {
	*x = ChallengeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeTask) ProtoMessage() {}

func (x *ChallengeTask) ProtoReflect() protoreflect.Message {
	mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeTask.ProtoReflect.Descriptor instead.
func (*ChallengeTask) Descriptor() ([]byte, []int) {
	return file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescGZIP(), []int{0}
}

func (x *ChallengeTask) GetChallengeID() string {
	if x != nil {
		return x.ChallengeID
	}
	return ""
}

func (x *ChallengeTask) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *ChallengeTask) GetStorages() []*ChallengeStorage {
	if x != nil {
		return x.Storages
	}
	return nil
}

func (x *ChallengeTask) GetWriteMarkers() []*ChallengeWriteMarker {
	if x != nil {
		return x.WriteMarkers
	}
	return nil
}

func (x *ChallengeTask) GetSelectedFile() *ChallengeStorage {
	if x != nil {
		return x.SelectedFile
	}
	return nil
}

func (x *ChallengeTask) GetSelectedBlockIndex() int64 {
	if x != nil {
		return x.SelectedBlockIndex
	}
	return 0
}

func (x *ChallengeTask) GetSelectedBlockBytes() []byte {
	if x != nil {
		return x.SelectedBlockBytes
	}
	return nil
}

func (x *ChallengeTask) GetSelectedMerklePath() *MerklePath {
	if x != nil {
		return x.SelectedMerklePath
	}
	return nil
}

type ChallengeStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Size        int64  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Path        string `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`
	PathLevel   int32  `protobuf:"varint,6,opt,name=PathLevel,proto3" json:"PathLevel,omitempty"`
	ParentPath  string `protobuf:"bytes,7,opt,name=ParentPath,proto3" json:"ParentPath,omitempty"`
	NumBlocks   int64  `protobuf:"varint,8,opt,name=NumBlocks,proto3" json:"NumBlocks,omitempty"`
	ContentHash string `protobuf:"bytes,9,opt,name=ContentHash,proto3" json:"ContentHash,omitempty"`
	ChunkSize   int64  `protobuf:"varint,10,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
}

func (x *ChallengeStorage) Reset() {
	*x = ChallengeStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeStorage) ProtoMessage() {}

func (x *ChallengeStorage) ProtoReflect() protoreflect.Message {
	mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeStorage.ProtoReflect.Descriptor instead.
func (*ChallengeStorage) Descriptor() ([]byte, []int) {
	return file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeStorage) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ChallengeStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChallengeStorage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChallengeStorage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChallengeStorage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ChallengeStorage) GetPathLevel() int32 {
	if x != nil {
		return x.PathLevel
	}
	return 0
}

func (x *ChallengeStorage) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *ChallengeStorage) GetNumBlocks() int64 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *ChallengeStorage) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *ChallengeStorage) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type ChallengeWriteMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocationRoot         string                 `protobuf:"bytes,1,opt,name=AllocationRoot,proto3" json:"AllocationRoot,omitempty"`
	PreviousAllocationRoot string                 `protobuf:"bytes,2,opt,name=PreviousAllocationRoot,proto3" json:"PreviousAllocationRoot,omitempty"`
	AllocationID           string                 `protobuf:"bytes,3,opt,name=AllocationID,proto3" json:"AllocationID,omitempty"`
	Size                   int64                  `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	BlobberID              string                 `protobuf:"bytes,5,opt,name=BlobberID,proto3" json:"BlobberID,omitempty"`
	Timestamp              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ClientID               string                 `protobuf:"bytes,7,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ClientPublicKey        string                 `protobuf:"bytes,8,opt,name=ClientPublicKey,proto3" json:"ClientPublicKey,omitempty"`
	Signature              string                 `protobuf:"bytes,9,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ChallengeWriteMarker) Reset() {
	*x = ChallengeWriteMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeWriteMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeWriteMarker) ProtoMessage() {}

func (x *ChallengeWriteMarker) ProtoReflect() protoreflect.Message {
	mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeWriteMarker.ProtoReflect.Descriptor instead.
func (*ChallengeWriteMarker) Descriptor() ([]byte, []int) {
	return file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengeWriteMarker) GetAllocationRoot() string {
	if x != nil {
		return x.AllocationRoot
	}
	return ""
}

func (x *ChallengeWriteMarker) GetPreviousAllocationRoot() string {
	if x != nil {
		return x.PreviousAllocationRoot
	}
	return ""
}

func (x *ChallengeWriteMarker) GetAllocationID() string {
	if x != nil {
		return x.AllocationID
	}
	return ""
}

func (x *ChallengeWriteMarker) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChallengeWriteMarker) GetBlobberID() string {
	if x != nil {
		return x.BlobberID
	}
	return ""
}

func (x *ChallengeWriteMarker) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ChallengeWriteMarker) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ChallengeWriteMarker) GetClientPublicKey() string {
	if x != nil {
		return x.ClientPublicKey
	}
	return ""
}

func (x *ChallengeWriteMarker) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type MerklePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []string `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	LeafIndex int64    `protobuf:"varint,2,opt,name=LeafIndex,proto3" json:"LeafIndex,omitempty"`
}

func (x *MerklePath) Reset() {
	*x = MerklePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePath) ProtoMessage() {}

func (x *MerklePath) ProtoReflect() protoreflect.Message {
	mi := &file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePath.ProtoReflect.Descriptor instead.
func (*MerklePath) Descriptor() ([]byte, []int) {
	return file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescGZIP(), []int{3}
}

func (x *MerklePath) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *MerklePath) GetLeafIndex() int64 {
	if x != nil {
		return x.LeafIndex
	}
	return 0
}

var File_code_go_0chain_net_core_pb_challenge_task_proto protoreflect.FileDescriptor

var file_code_go_0chain_net_core_pb_challenge_task_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x30, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x0c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x12, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x8e, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xea, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x40,
	0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x1c, 0x5a, 0x1a, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x30, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescOnce sync.Once
	file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescData = file_code_go_0chain_net_core_pb_challenge_task_proto_rawDesc
)

func file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescGZIP() []byte {
	file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescOnce.Do(func() {
		file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescData)
	})
	return file_code_go_0chain_net_core_pb_challenge_task_proto_rawDescData
}

var file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_code_go_0chain_net_core_pb_challenge_task_proto_goTypes = []interface{}{
	(*ChallengeTask)(nil),         // 0: ChallengeTask
	(*ChallengeStorage)(nil),      // 1: ChallengeStorage
	(*ChallengeWriteMarker)(nil),  // 2: ChallengeWriteMarker
	(*MerklePath)(nil),            // 3: MerklePath
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_code_go_0chain_net_core_pb_challenge_task_proto_depIdxs = []int32{
	1, // 0: ChallengeTask.Storages:type_name -> ChallengeStorage
	2, // 1: ChallengeTask.WriteMarkers:type_name -> ChallengeWriteMarker
	1, // 2: ChallengeTask.SelectedFile:type_name -> ChallengeStorage
	3, // 3: ChallengeTask.SelectedMerklePath:type_name -> MerklePath
	4, // 4: ChallengeWriteMarker.Timestamp:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_code_go_0chain_net_core_pb_challenge_task_proto_init() }
func file_code_go_0chain_net_core_pb_challenge_task_proto_init() {
	if File_code_go_0chain_net_core_pb_challenge_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeWriteMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_code_go_0chain_net_core_pb_challenge_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_code_go_0chain_net_core_pb_challenge_task_proto_goTypes,
		DependencyIndexes: file_code_go_0chain_net_core_pb_challenge_task_proto_depIdxs,
		MessageInfos:      file_code_go_0chain_net_core_pb_challenge_task_proto_msgTypes,
	}.Build()
	File_code_go_0chain_net_core_pb_challenge_task_proto = out.File
	file_code_go_0chain_net_core_pb_challenge_task_proto_rawDesc = nil
	file_code_go_0chain_net_core_pb_challenge_task_proto_goTypes = nil
	file_code_go_0chain_net_core_pb_challenge_task_proto_depIdxs = nil
}
